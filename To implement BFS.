from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    traversal = []

    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            print(f"Visiting: {vertex}")
            visited.add(vertex)
            traversal.append(vertex)
            queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)

    return traversal

# Sample graph as adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

# Perform BFS from starting node 'A'
result = bfs(graph, 'A')
print("\nBFS Traversal Order:", result)
