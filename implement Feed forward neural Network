import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class FeedforwardNN:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.5):
        # Initialize weights
        self.learning_rate = learning_rate
        self.W1 = np.random.uniform(size=(input_size, hidden_size))
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.uniform(size=(hidden_size, output_size))
        self.b2 = np.zeros((1, output_size))

    def forward(self, X):
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = sigmoid(self.z2)
        return self.a2

    def backward(self, X, y, output):
        error = y - output
        d_output = error * sigmoid_derivative(output)

        error_hidden = d_output.dot(self.W2.T)
        d_hidden = error_hidden * sigmoid_derivative(self.a1)

        # Update weights and biases
        self.W2 += self.a1.T.dot(d_output) * self.learning_rate
        self.b2 += np.sum(d_output, axis=0, keepdims=True) * self.learning_rate
        self.W1 += X.T.dot(d_hidden) * self.learning_rate
        self.b1 += np.sum(d_hidden, axis=0, keepdims=True) * self.learning_rate

    def train(self, X, y, epochs=10000):
        for epoch in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)
            if epoch % 1000 == 0:
                loss = np.mean(np.square(y - output))
                print(f"Epoch {epoch} Loss: {loss:.4f}")

    def predict(self, X):
        output = self.forward(X)
        return (output > 0.5).astype(int)

# Example: XOR problem
if __name__ == "__main__":
    # Input dataset for XOR
    X = np.array([[0,0],
                  [0,1],
                  [1,0],
                  [1,1]])
    # Expected output
    y = np.array([[0],
                  [1],
                  [1],
                  [0]])

    nn = FeedforwardNN(input_size=2, hidden_size=2, output_size=1, learning_rate=0.5)
    nn.train(X, y, epochs=10000)

    print("\nPredictions:")
    for x in X:
        pred = nn.predict(x.reshape(1,-1))
        print(f"Input: {x} -> Predicted Output: {pred[0][0]}")
