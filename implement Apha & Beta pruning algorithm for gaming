import math

def print_board(board):
    print("\n")
    for i in range(3):
        print(" | ".join(board[i]))
        if i < 2:
            print("--+---+--")
    print("\n")

def check_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]):
            return True
        if all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def alpha_beta(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, 'O'):
        return 10 - depth
    if check_winner(board, 'X'):
        return depth - 10
    if is_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = alpha_beta(board, depth + 1, alpha, beta, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = alpha_beta(board, depth + 1, alpha, beta, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def best_move(board):
    best_score = -math.inf
    move = None
    alpha = -math.inf
    beta = math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = alpha_beta(board, 0, alpha, beta, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def tic_tac_toe_alpha_beta():
    board = [[' ']*3 for _ in range(3)]

    while True:
        print_board(board)

        # Player X move
        while True:
            try:
                row = int(input("Enter your move row (0-2): "))
                col = int(input("Enter your move column (0-2): "))
                if row not in range(3) or col not in range(3):
                    print("Invalid position. Try again.")
                    continue
                if board[row][col] != ' ':
                    print("Position already taken. Try again.")
                    continue
                board[row][col] = 'X'
                break
            except ValueError:
                print("Invalid input. Enter numbers between 0 and 2.")

        if check_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI move (O)
        move = best_move(board)
        if move:
            board[move[0]][move[1]] = 'O'
            print(f"Computer placed O at position ({move[0]}, {move[1]})")

        if check_winner(board, 'O'):
            print_board(board)
            print("Computer wins!")
            break

        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

if __name__ == "__main__":
    tic_tac_toe_alpha_beta()
