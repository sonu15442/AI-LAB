import heapq

def a_star_search(graph, heuristics, start, goal):
    open_list = []
    heapq.heappush(open_list, (0 + heuristics[start], 0, start, [start]))  # (f, g, current, path)
    visited = set()

    while open_list:
        f, g, current, path = heapq.heappop(open_list)

        if current == goal:
            print("Path found:", " -> ".join(path))
            print("Total cost:", g)
            return path

        if current in visited:
            continue
        visited.add(current)

        for neighbor, cost in graph[current]:
            if neighbor not in visited:
                new_g = g + cost
                new_f = new_g + heuristics[neighbor]
                heapq.heappush(open_list, (new_f, new_g, neighbor, path + [neighbor]))

    print("No path found")
    return None

# Example graph (adjacency list with costs)
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 6), ('E', 2)],
    'C': [('F', 3)],
    'D': [],
    'E': [('D', 1)],
    'F': [('E', 1)],
}

# Heuristic values for each node (estimated cost to goal)
heuristics = {
    'A': 7,
    'B': 6,
    'C': 5,
    'D': 0,
    'E': 1,
    'F': 2
}

# Start and goal
start_node = 'A'
goal_node = 'D'

# Run A* algorithm
a_star_search(graph, heuristics, start_node, goal_node)
