import heapq

# Define the goal state
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 represents the blank tile

# Heuristic: Manhattan distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(target_x - i) + abs(target_y - j)
    return distance

# Find position of 0 (blank tile)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate neighbors
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# Convert state to tuple for hashing
def state_to_tuple(state):
    return tuple([num for row in state for num in row])

# A* Algorithm
def solve_8_puzzle(start_state):
    frontier = []
    heapq.heappush(frontier, (0 + manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while frontier:
        f, g, current_state, path = heapq.heappop(frontier)
        state_key = state_to_tuple(current_state)

        if state_key in visited:
            continue
        visited.add(state_key)

        if current_state == goal_state:
            return path + [current_state]

        for neighbor in get_neighbors(current_state):
            if state_to_tuple(neighbor) not in visited:
                heapq.heappush(frontier, (g + 1 + manhattan_distance(neighbor), g + 1, neighbor, path + [current_state]))

    return None

# Pretty print
def print_state(state):
    for row in state:
        print(' '.join(str(num) if num != 0 else ' ' for num in row))
    print()

# Example input
start = [[1, 2, 3],
         [4, 0, 6],
         [7, 5, 8]]

# Solve
solution = solve_8_puzzle(start)

# Output
if solution:
    print("Solution found in", len(solution)-1, "moves:")
    for step in solution:
        print_state(step)
else:
    print("No solution found.")
